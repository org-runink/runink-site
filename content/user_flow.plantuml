@startuml
!theme materia
skinparam linetype ortho
skinparam componentStyle rectangle
skinparam shadowing false

title Runink Architecture — Layered Flow (Authoring → Execution)

' ────────────────────────────────────────
' Developer / Authoring Layer
' ────────────────────────────────────────
rectangle "🧑‍💻 Developer / Authoring Layer" {
  component "CLI (runi)"
  component "REPL\n(DataFrame-style)"
  component "DSL Authoring\n(features/)"
  component "Contract Definitions\n(contracts/)"
  component "Test Engine\n(Golden tests, fixtures)"
}

' ────────────────────────────────────────
' Control Plane
' ────────────────────────────────────────
rectangle "🧭 Control Plane\n(Domain + Orchestration)" {
  component "API Server\n(REST/gRPC, OIDC, Herds)"
  component "Scheduler\n(DAG + Constraint Solver)"
  component "Metadata Catalog\n(Contracts, Tags, Scenarios)"
  component "Secrets Manager\n(Raft-backed, Herd-scoped)"
  component "Compliance & RBAC"
  component "Checkpoint Coordinator\n(Partial run resume)"
}

' ────────────────────────────────────────
' Distributed State Layer
' ────────────────────────────────────────
rectangle "🗃️ Distributed State Layer\n(Raft + Storage)" {
  component "Raft Group\n(Herds + Scheduler + State Sync)"
  component "BadgerDB Volumes" as Badger {
    [Run Metadata]
    [Slice-local Volumes]
    [Checkpointed Outputs]
  }
  component "Defs: Herds / Contracts / RBAC / Secrets"
}

' ────────────────────────────────────────
' Execution Plane
' ────────────────────────────────────────
rectangle "⚙️ Execution Plane\n(Slices + Agents)" {
  component "Runi Agent\n(Node-local orchestrator)"
  component "Slice Supervisor\n(Windowed Runs)"
  component "Runi Slice Process" as Slice {
    [Ephemeral NS + Cgroup]
    [Contract Function Loader]
    [Zero-Copy io.Pipe]
    [Volume Access + Sink Output]
    [Lineage Emit]
  }
  component "Windowed Join Runner\n(Cross-Slice Rehydration)"
}

' ────────────────────────────────────────
' Governance / Observability
' ────────────────────────────────────────
rectangle "🔐 Governance & Observability" {
  component "Data Quality\n(Field Rules + Contract Tags)"
  component "Lineage Engine\n(RunID + ContractHash)"
  component "Metrics Exporter\n(OTEL, Prometheus, Fluentd)"
  component "DLQ + Routing\n(Tag-based)"
  component "Audit Log Engine\n(Signed Slice Logs)"
}

' ────────────────────────────────────────
' External IO Layer
' ────────────────────────────────────────
rectangle "🌐 External Sources / Sinks / APIs" {
  component "Kafka / S3 / Snowflake / GCS"
  component "Postgres / Redshift"
  component "FDC3 / CDM / REST APIs"
  component "Optional State (BadgerDB)"
}

' ─────── Arrows to show architecture flow ─────────

"CLI (runi)" --> "API Server\n(REST/gRPC, OIDC, Herds)"
"REPL\n(DataFrame-style)" --> "API Server\n(REST/gRPC, OIDC, Herds)"
"DSL Authoring\n(features/)" --> "Metadata Catalog\n(Contracts, Tags, Scenarios)"
"Contract Definitions\n(contracts/)" --> "Metadata Catalog\n(Contracts, Tags, Scenarios)"
"Test Engine\n(Golden tests, fixtures)" --> "Compliance & RBAC"

"API Server\n(REST/gRPC, OIDC, Herds)" --> "Scheduler\n(DAG + Constraint Solver)"
"Scheduler\n(DAG + Constraint Solver)" --> "Runi Agent\n(Node-local orchestrator)"
"Secrets Manager\n(Raft-backed, Herd-scoped)" --> "Runi Agent\n(Node-local orchestrator)"
"Checkpoint Coordinator\n(Partial run resume)" --> "Runi Agent\n(Node-local orchestrator)"

"Metadata Catalog\n(Contracts, Tags, Scenarios)" --> "Lineage Engine\n(RunID + ContractHash)"
"Runi Agent\n(Node-local orchestrator)" --> "Runi Slice Process"
"Runi Slice Process" --> "Windowed Join Runner\n(Cross-Slice Rehydration)"

"Runi Slice Process" --> "Lineage Engine\n(RunID + ContractHash)"
"Runi Slice Process" --> "DLQ + Routing\n(Tag-based)"
"Runi Slice Process" --> "Audit Log Engine\n(Signed Slice Logs)"
"Runi Slice Process" --> "Metrics Exporter\n(OTEL, Prometheus, Fluentd)"

"Windowed Join Runner\n(Cross-Slice Rehydration)" --> "Optional State (BadgerDB)"

"DLQ + Routing\n(Tag-based)" --> "Kafka / S3 / Snowflake / GCS"
"Runi Slice Process" --> "Kafka / S3 / Snowflake / GCS"
"Runi Slice Process" --> "FDC3 / CDM / REST APIs"

@enduml
