<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Runink Docs :: Runink</title>
    <link>http://localhost:1313/docs/index.html</link>
    <description>📌 Overview Runink is a Go-native distributed pipeline orchestration and governance platform. It defines a self-sufficient, distributed environment to orchestrate and execute data pipelines — replacing complex Kubernetes or Slurm setups with an integrated runtime built on:&#xA;Linux primitives: cgroups, namespaces, exec Go-based execution and scheduling Governance, lineage, and contract enforcement Serverless-style, per-slice isolation and resource control Runink slices run like fast, secure micro-VMs — written in Go, isolated with Linux, coordinated by Raft.</description>
    <generator>Hugo</generator>
    <language>en</language>
    <atom:link href="http://localhost:1313/docs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Architecture</title>
      <link>http://localhost:1313/docs/architecture/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/architecture/index.html</guid>
      <description>Runink Architecture: Go/Linux Native Distributed Data Environment Self-sufficient, distributed environment for orchestrating and executing data pipelines using Go and Linux primitives. This system acts as the cluster resource manager and scheduler (replacing Slurm), provides Kubernetes-like logical isolation and RBAC, integrates data governance features, and ensures robust security and observability. It aims for high efficiency by avoiding traditional virtualization or container runtimes like Docker. Define a self-sufficient, distributed environment for orchestrating and executing data pipelines using Go and Linux primitives, with enhanced metadata capabilities designed to support standard data governance (lineage, catalog) AND future integration of LLM-generated annotations.</description>
    </item>
    <item>
      <title>Components</title>
      <link>http://localhost:1313/docs/components/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/components/index.html</guid>
      <description>Runink Platform Components This page describes the core building blocks of Runink — from the API server to slices — that make up the distributed data environment. Each component serves a purpose in ensuring secure, auditable, and high-performance pipeline execution.&#xA;Components Table Component Role Location API Server Entry point, AuthN/Z, coordination Control Plane Identity Manager OIDC/JWT validation and RBAC enforcement Control Plane Barn Raft-backed KV store Control Plane Scheduler DAG-aware placement engine Control Plane Secrets Manager Encrypted secret storage and delivery Control Plane Governance Svc Lineage, quality, LLM annotations Control Plane Runi Agent Worker orchestrator (cgroup+namespace) Worker Node Runi Slice Executed unit of pipeline logic Worker Node Herd Tenant boundary and resource isolation System-wide Contracts Data validation and schema enforcement Contracts repo DSL Parser Converts .dsl to Go DAGs Build pipeline Runink Services 📘 Contract Engine All data contracts (schemas) are defined in Go structs, with support for:</description>
    </item>
    <item>
      <title>Benchmark</title>
      <link>http://localhost:1313/docs/benchmark/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/benchmark/index.html</guid>
      <description>1. Architecture &amp; Paradigm Runink: A Go/Linux-native, vertically integrated data platform that combines execution, scheduling, governance, and observability in a single runtime. Unlike traditional stacks, Runink does not rely on Kubernetes or external orchestrators. Instead, it uses a Raft-based control plane to ensure high availability and consensus across services like scheduling, metadata, and security — forming a distributed operating model purpose-built for data.&#xA;Competitors: Use a layered, loosely coupled stack:</description>
    </item>
    <item>
      <title>CLI Reference</title>
      <link>http://localhost:1313/docs/cli/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/cli/index.html</guid>
      <description>🧰 Runink CLI Reference (runi) The runi CLI is the command-line interface to everything in the Runink data platform. It’s your developer-first companion for defining, testing, running, securing, and publishing data pipelines — all from declarative .dsl files and Go-native contracts.&#xA;This reference describes all available commands, grouped by capability.&#xA;🧱 Project &amp; Pipeline Lifecycle Command Description runi herd init [project-name] Scaffold a new workspace with starter contracts, features, CI config runi compile --scenario &lt;file&gt; Generate Go pipeline code from .dsl files runi run --scenario &lt;file&gt; --contract &lt;contract.json&gt; Run pipelines locally or remotely runi watch --scenario &lt;file&gt; Auto-compile &amp; re-run scenario on save 📁 Schema &amp; Contract Management Command Description runi contract gen --struct &lt;pkg.Type&gt; Generate a contract from Go struct runi contract diff --old v1.json --new v2.json Show schema drift between versions runi contract rollback Revert to previous contract version runi contract history --name &lt;contract&gt; Show all versions and changelog entries runi contract validate --file &lt;file&gt; Validate a file against a contract runi contract catalog Create an index of all contracts in the repo runi contract hash Generate contract hash for versioning 🧪 Testing &amp; Data Validation Command Description runi synth --dsl feature.dsl --contract feature.contract --golden input.golden Generate synthetic golden test data based on golden files runi audit --dsl feature.dsl --contract feature.contract --golden input.golden Validate pipeline against contract using golden files 🔐 Security, Publishing &amp; Compliance Command Description runi secure [--sbom|--sign|--scan] Run security audits and generate SBOM runi publish Push metadata, lineage, and contracts to registry runi sbom export [--format spdx] Export SPDX-compliant software bill of materials runi changelog gen Generate changelogs from contract/feature diffs 🔍 Observability &amp; Lineage Command Description runi lineage --run-id &lt;uuid&gt; Show DAG lineage for a run runi lineage track --source A --sink B Manually link lineage metadata runi lineage graph --out file.dot Export lineage graph in DOT format runi metadata get --key &lt;name&gt; Retrieve stored metadata for a step runi metadata annotate --key &lt;name&gt; Attach annotation to pipeline metadata runi logs --run-id &lt;uuid&gt; View logs for a specific run runi status --run-id &lt;uuid&gt; Check status of a pipeline execution 🤖 Distributed Execution (Remote) Command Description runi deploy --target &lt;k8s|local&gt; Deploy Runi workers to a local or remote cluster runi start --slice &lt;file&gt; --herd &lt;namespace&gt; Start execution of a scenario remotely runi kill --run-id &lt;uuid&gt; Terminate running scenario 💪 Control Plane &amp; Agents Command Description runi herdctl create Create a new Herd (namespace + quotas + policies) runi herdctl delete Delete a Herd runi herdctl update Update Herd quotas, RBAC, metadata runi herdctl list List all Herds and resource states runi herdctl quota set &lt;herd&gt; Update CPU/mem quotas live runi herdctl lineage &lt;herd&gt; View lineage graphs scoped to a Herd runi agentctl list List active Runi agents, resource usage, labels runi agentctl status &lt;agent&gt; Detailed agent status (health, registered slices, metrics) runi agentctl drain &lt;agent&gt; Mark agent as unschedulable (cordon) runi agentctl register Manually register agent (optional bootstrap) runi agentctl cordon &lt;agent&gt; Prevent slice scheduling 🌐 Worker Slice Management Command Description runi slicectl list --herd &lt;id&gt; List all active slices for a Herd runi slicectl logs &lt;slice-id&gt; Fetch logs for a given slice runi slicectl cancel &lt;slice-id&gt; Cancel a running slice gracefully runi slicectl metrics &lt;slice-id&gt; Show real-time metrics for a slice runi slicectl promote &lt;slice-id&gt; Checkpoint a slice mid-run 🔀 Introspection &amp; Visualization Command Description runi explain --scenario &lt;file&gt; Describe DAG and step resolution logic runi graphviz --scenario &lt;file&gt; Render DAG as a .png, .svg, or .dot runi diff --feature old.dsl --feature new.dsl Compare feature files and show logic drift 🧪 REPL &amp; Exploratory Commands Command Description runi repl Launch interactive DataFrame, SQL, JSON REPL runi json explore -f file.json -q &#39;.email&#39; Run jq-style query on JSON runi query -e &#34;SELECT * FROM dataset&#34; Run SQL-like query on scenario input 🛠️ Dev Tools &amp; Generators Command Description runi gen --dsl input.json Generate feature from sample input runi contract from-feature &lt;file&gt; Extract contract from .dsl spec runi schema hash Generate contract fingerprint runi bump Auto-increment contract version with changelog 🧹 Plugins &amp; Extensions Command Description runi plugin install &lt;url&gt; Install external plugin runi plugin list List installed extensions runi plugin run &lt;name&gt; Execute a plugin subcommand 📦 Packaging &amp; CI/CD Command Description runi build Compile pipeline bundle for remote use runi pack Zip workspace for deployment/distribution runi upgrade Self-update the CLI and plugins runi doctor Diagnose CLI and project setup 📅 Runtime Lifecycle Command Description runi restart --run-id &lt;uuid&gt; Restart a pipeline from last successful checkpoint runi resume --run-id &lt;uuid&gt; Resume paused pipeline without reprocessing runi checkpoint --scenario &lt;file&gt; Create a persistent step-based checkpoint marker 💬 Collaboration &amp; Governance Command Description runi comment --contract &lt;file&gt; Leave inline comments for review (contract-level QA) runi request-approval --contract &lt;file&gt; Submit contract for governance approval runi feedback --scenario &lt;file&gt; Attach review notes to a scenario 🛡️ Privacy, Redaction &amp; Data Escrow Command Description runi redact --contract &lt;file&gt; Automatically redact PII based on tags runi escrow --run-id &lt;uuid&gt; Encrypt pipeline outputs for future unsealing runi anonymize --input &lt;file&gt; Generate synthetic version of a sensitive input file 🗓 Event-Based Execution Command Description runi trigger --on &lt;webhook|s3|pubsub&gt; Set up trigger-based pipeline starts runi listen --event &lt;type&gt; Listen for external event to start scenario runi subscribe --stream &lt;source&gt; Subscribe to stream source with offset recovery 🔄 Pipeline &amp; Contract Lifecycle Command Description runi freeze --scenario &lt;file&gt; Lock DAG hash and contract state as immutable runi archive --herd &lt;name&gt; --keep &lt;N&gt; Archive old scenarios/runs beyond retention policy runi retire --contract &lt;file&gt; Deprecate contract from active use 🧬 Metadata Graph &amp; Semantic Search Command Description runi knowledge export --format turtle Export contract and DAG metadata as RDF runi query lineage Run SQL-style queries across lineage metadata 💬 Use runi &lt;command&gt; --help for flags, options, and examples.</description>
    </item>
    <item>
      <title>CLI Help Commands</title>
      <link>http://localhost:1313/docs/clihelp/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/clihelp/index.html</guid>
      <description>🆘 Runink CLI: Help Template This is a developer-friendly help template for implementing consistent runi &lt;command&gt; --help outputs.&#xA;🧱 Format: Basic Help Command runi &lt;command&gt; [subcommand] [flags] Usage: runi &lt;command&gt; [options] Options: -h, --help Show this help message and exit -v, --verbose Show detailed logs and diagnostics Example: runi init --help Initialize a new Runink project. Usage: runi init [project-name] Flags: -h, --help Show help for init 🔄 Example: runi compile --help runi compile --scenario &lt;file.dsl&gt; Description: Compile a `.dsl` scenario and its contract into an executable Go DAG. Generates a Go file under `rendered/` based on contract-linked step tags. Usage: runi compile --scenario features/trade_cdm.dsl Flags: --scenario Path to a DSL scenario file --out Optional: custom output path for DAG (default: rendered/&lt;name&gt;.go) --dry-run Only validate scenario and contract, do not write DAG --verbose Show full DAG step resolution logs 🧪 Example: runi test --help runi test --scenario &lt;file.dsl&gt; Description: Execute a feature scenario with golden test inputs and compare output. Supports diff mode and golden update flows. Usage: runi test --scenario features/onboard.dsl Flags: --scenario DSL file to test --golden Optional: override path to golden test folder --update Automatically update golden output on success --only &lt;step&gt; Run test up to a specific pipeline step 🔐 Example: runi contract gen --help runi contract gen --struct &lt;package.Type&gt; --out &lt;file&gt; Description: Generate a JSON contract definition from a Go struct. Includes schema, access tags, and validation metadata. Usage: runi contract gen --struct contracts.Customer --out contracts/customer.json Flags: --struct Fully qualified Go type (e.g. contracts.Customer) --out Output contract file path --flatten Inline nested types into flat fields --herd Optional: attach to specific herd (e.g. finance) runi contract diff --help Diff two versions of a contract and show schema drift. Usage: runi contract diff --old v1.json --new v2.json runi run --help Run a compiled pipeline with data inputs. Usage: runi run --scenario &lt;file.dsl&gt; [--contract file] [--herd name] Flags: --scenario Scenario to execute --contract Optional explicit contract --herd Herd to run pipeline in --dry-run Preview DAG resolution only runi lineage --help Show lineage metadata for a run. Usage: runi lineage --run-id &lt;id&gt; Flags: --run-id Unique run identifier --output Format (json|csv|graph) runi publish --help Publish contracts, lineage, and tags to metadata registry. Usage: runi publish --herd &lt;name&gt; [--scenario file] runi repl --help Start interactive REPL for querying test inputs or contract data. Usage: runi repl --scenario &lt;path&gt; 🤖 Example: runi deploy --help runi deploy --target &lt;target&gt; Description: Deploy Runi workers and slices to a remote orchestration cluster. Usage: runi deploy --target k8s Flags: --target Target platform (k8s, bigmachine) --herd Herd (namespace) to deploy into --dry-run Simulate deployment without applying --confirm Require manual confirmation for remote changes runi schedule --help Schedule a pipeline scenario for recurring execution. Usage: runi schedule --scenario &lt;file&gt; --cron &#34;0 6 * * *&#34; Flags: --scenario DSL file --cron Cron-style expression runi audit --help Show schema contract change history and approvals. Usage: runi audit --contract &lt;file&gt; runi restart --help Restart a failed or incomplete pipeline run from its last checkpoint. Usage: runi restart --run-id &lt;uuid&gt; Flags: --run-id Run ID to restart from --force Ignore checkpoint and rerun from start runi resume --help Resume an interrupted or paused pipeline. Usage: runi resume --run-id &lt;uuid&gt; runi checkpoint --help Create a DAG state checkpoint for partial run recovery. Usage: runi checkpoint --scenario &lt;file&gt; runi comment --help Leave inline comments for contracts or fields (used in review tools). Usage: runi comment --contract &lt;file&gt; --field &lt;path&gt; --note &lt;text&gt; runi request-approval --help Submit a contract for governance approval and audit. Usage: runi request-approval --contract &lt;file&gt; runi feedback --help Attach feedback note to a scenario feature for peer review. Usage: runi feedback --scenario &lt;file&gt; --note &lt;text&gt; runi redact --help Automatically redact fields marked pii:&#34;true&#34; in a contract schema. Usage: runi redact --contract &lt;file&gt; --out &lt;file&gt; runi escrow --help Encrypt and store output data for delayed release or approval. Usage: runi escrow --run-id &lt;uuid&gt; --out &lt;vault.json&gt; runi anonymize --help Create a non-sensitive version of input using faker + tags. Usage: runi anonymize --input &lt;file&gt; --contract &lt;file&gt; --out &lt;file&gt; runi trigger --help Define an event trigger for this scenario. Usage: runi trigger --scenario &lt;file&gt; --on webhook|s3|pubsub runi listen --help Start a listener to monitor incoming event and dispatch pipeline. Usage: runi listen --event &lt;type&gt; runi subscribe --help Subscribe to a streaming topic or channel with offset tracking. Usage: runi subscribe --stream &lt;topic&gt; --window 5m runi freeze --help Freeze contract + scenario versions with hashes for snapshot validation. Usage: runi freeze --scenario &lt;file&gt; runi archive --help Archive old versions of scenarios and their runs by herd. Usage: runi archive --herd &lt;name&gt; --keep 3 runi retire --help Retire a contract so it cannot be used in future scenarios. Usage: runi retire --contract &lt;file&gt; runi lineage graph --help Export full DAG and contract lineage as GraphViz dot file. Usage: runi lineage graph --out lineage.dot runi knowledge export --help Export pipeline metadata using RDF serialization (Turtle/N-Triples). Usage: runi knowledge export --format turtle runi query lineage --help Query lineage metadata using SQL-like syntax. Usage: runi query lineage --sql &#34;SELECT * WHERE pii = true&#34; runi openai audit --help Use an LLM to summarize contract diffs or suggest field comments. Usage: runi openai audit --contract &lt;file&gt; runi sandbox --help Execute scenario in a secure ephemeral environment. Usage: runi sandbox --scenario &lt;file&gt; runi simulate --help Replay input data as a stream window to test stateful logic. Usage: runi simulate --input &lt;file&gt; --window 5m runi mint-token --help Generate a short-lived JWT for scoped access by herd or scenario. Usage: runi mint-token --herd finance --role analyst --ttl 5m 🧠 Best Practices ✅ Describe what the command does, not how it’s implemented ✅ Include at least 1 usage example ✅ Use consistent flags: --scenario, --contract, --out, --herd ✅ Provide guidance for --dry-run, --verbose, --help ✅ Include multi-step examples if command touches multiple files</description>
    </item>
    <item>
      <title>Contributing</title>
      <link>http://localhost:1313/docs/contributing/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/contributing/index.html</guid>
      <description>🤝 Contributing to Runink Welcome! First off, thank you for considering contributing to Runink. We deeply appreciate your support and effort to improve our project.&#xA;This document will guide you through the process of contributing code, filing issues, suggesting features, and participating in the Runink community.&#xA;📜 Code of Conduct We expect everyone participating to adhere to our Code of Conduct (to be created). Respect and kindness are the foundation.&#xA;🛠️ How to Contribute 1. Fork the Repo Use GitHub’s “Fork” button to create a personal copy of the repository.</description>
    </item>
    <item>
      <title>Data Lineage</title>
      <link>http://localhost:1313/docs/data-lineage/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/data-lineage/index.html</guid>
      <description>Data Lineage &amp; Metadata Tracking – Runink Runink pipelines are designed to be fully traceable, auditable, and schema-aware. With built-in lineage support, every pipeline can generate:&#xA;Visual DAGs of data flow and dependencies Metadata snapshots with schema versions and field hashes Run-level logs for audit, debugging, and compliance This guide walks through how Runink enables robust data observability and governance by default.&#xA;🔍 What Is Data Lineage? Lineage describes where your data came from, what happened to it, and where it went.</description>
    </item>
    <item>
      <title>Feature DSL</title>
      <link>http://localhost:1313/docs/feature-dsl/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/feature-dsl/index.html</guid>
      <description>📘 Feature DSL — Authoring Pipelines in Natural Language Runink’s .dsl files allow data, governance, and domain teams to write declarative pipeline logic in plain English — no YAML, no code, just structured steps tied to contracts.&#xA;Inspired by Gherkin and feature-driven development, the DSL is intentionally designed to:&#xA;Align with real-world data contracts Support lineage, compliance, and multi-tenant governance Be editable by non-engineers — analysts, stewards, and reviewers ✨ Full Example Feature: Trade Events – Validation &amp; Compliance Scenario: Validate and Tag Incoming Financial Trade Events Metadata: purpose: &#34;Check and tag incoming trade events for compliance and data quality&#34; module_layer: &#34;Silver&#34; herd: &#34;Finance&#34; slo: &#34;99.9%&#34; classification: &#34;pii&#34; contract: &#34;cdm_trade/fdc3events.contract&#34; contract_version: &#34;1.0.0&#34; compliance: [&#34;SOX&#34;, &#34;GDPR&#34;, &#34;PCI-DSS&#34;] lineage_tracking: true Given: &#34;Arrival of Events&#34; - source_type: stream - name: &#34;Trade Events Kafka Stream&#34; - format: CDM - tags: [&#34;live&#34;, &#34;trades&#34;, &#34;finance&#34;] When &#34;Data is received&#34;: - Decode each trade event using the CDM schema - Check for required fields: trade_id, symbol, price, timestamp - Mask sensitive values like SSNs, emails, and bank accounts - Tag events with classification and region - Compare schema to the latest approved contract version Then: - Send valid records to: snowflake table &#34;Validated Trades Table&#34; - Send invalid records to: snowflake table &#34;DLQ for Invalid Trades&#34; - Annotate all records with compliance and lineage metadata Assertions: - At least 1,000 records must be processed - Schema drift must not be detected - All sensitive fields must pass redaction or tokenization checks GoldenTest: input: &#34;cdm_trade/fdc3events.input&#34; output: &#34;cdm_trade/data/fdc3events.validated.golden&#34; validation: strict Notifications: - On schema failure → alert &#34;alerts/finance_data_validation&#34; - On masking failure → alert &#34;alerts/finance_security_breach&#34; 🧠 DSL Concepts Block Description Feature High-level business intent (group of scenarios) Scenario Specific pipeline run, often tied to a contract version Metadata Tags used for governance, lineage, compliance, and SLOs Given Declares the data source and input assumptions When Describes logic, transformations, and validations to apply Then Declares output actions — writing to sinks, tagging, alerts Assertions Validate record counts, masking, schema drift, etc. GoldenTest Points to expected inputs/outputs for regression safety Notifications Alerts emitted when failures occur during pipeline runs 🔍 Metadata-Driven Pipelines Each .dsl is contract-aware and herd-scoped by default.</description>
    </item>
    <item>
      <title>Getting Started</title>
      <link>http://localhost:1313/docs/getting_started/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/getting_started/index.html</guid>
      <description>Getting Started with Runink Welcome to Runink! This quick-start guide will help you get up and running with Runink to effortlessly build, test, and run data pipelines.&#xA;🚀 1. Installation Make sure you have Go installed (v1.20 or later). Then install Runink:&#xA;go install github.com/runink/runink@latest Ensure $GOPATH/bin is in your $PATH.&#xA;🛠 2. Initialize Your Project Create a new Runink project in seconds:&#xA;runi init myproject cd myproject This command generates:</description>
    </item>
    <item>
      <title>Glossary</title>
      <link>http://localhost:1313/docs/glossary/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/glossary/index.html</guid>
      <description>Runink Glossary This glossary defines key terms, acronyms, and concepts used throughout the Runink documentation and codebase.&#xA;.dsl File A human-readable file written in Gherkin syntax used to describe a data pipeline scenario using Given/When/Then structure and tags like @source, @step, and @sink.&#xA;BDD (Behavior-Driven Development) A software development approach that describes application behavior in plain language, often used with .dsl files.&#xA;Golden File A snapshot of the expected output from a pipeline or transformation, used to assert correctness in automated tests.</description>
    </item>
    <item>
      <title>Roadmap</title>
      <link>http://localhost:1313/docs/roadmap/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/roadmap/index.html</guid>
      <description>🗺️ Runink Roadmap Welcome to the official Runink Roadmap — our evolving guide to what we’re building, where we’re headed, and how you can get involved.&#xA;Runink is built on the belief that modern data platforms should be safe by default, composable by design, and collaborative at scale. This roadmap reflects our commitment to transparency, community-driven development, and rapid iteration.&#xA;🧩 Roadmap Themes Theme Description Composable Pipelines Make it easy to build, reuse, and test pipeline steps across teams and domains. Secure &amp; Compliant by Default Tighten RBAC, data contracts, and observability for enterprise-grade governance. DevX &amp; Developer Productivity Empower devs with a powerful CLI, REPL, codegen, and rapid iteration loops. Streaming-First DataOps Advance real-time use cases with backpressure-safe, contract-aware streaming. Interoperability &amp; Ecosystem Play well with FDC3, CDM, OpenLineage, Kafka, Snowflake, and more. 🧭 Current Focus (Q2 2025) These items are in active development or early testing:</description>
    </item>
    <item>
      <title>Runink Quickstart</title>
      <link>http://localhost:1313/docs/runink_quickstart/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/runink_quickstart/index.html</guid>
      <description>🚀 Runink Quickstart: CDM Trade Pipeline This example shows how to define, test, apply, and run a declarative data pipeline using Runink.&#xA;Environment scenario %% Mermaid Diagram: Runink Architecture (Blueprint View) flowchart TD subgraph Developer_Client[&#34;🌐 Developer / Client&#34;] Developer[&#34;Developer&#34;] end subgraph Global_Control_Plane[&#34;🧭 Runink Global Control Plane (HA Setup)&#34;] GlobalAPI[&#34;API Server x3 - AuthN/AuthZ - Herd Routing - TLS gRPC&#34;] HerdDirectory[&#34;Herd Directory - Maps Herds to Raft Groups - Metadata Routing&#34;] end subgraph Finance_Herd[&#34;🏦 Finance Herd Partition&#34;] FinanceScheduler[&#34;Finance Scheduler (Leader) - DAG Planning - Placement Decisions&#34;] FinanceBarn[&#34;Finance Barn (KV Store) - BadgerDB (Local)&#34;] FinanceGovernance[&#34;Finance Governance Service - Lineage - Quality - Contracts&#34;] FinanceSecrets[&#34;Finance Secrets Manager - Raft-backed Secret Storage&#34;] FinanceRaft[&#34;Finance Raft Group (5 Nodes) (etcd-io/raft)&#34;] end subgraph Analytics_Herd[&#34;📊 Analytics Herd Partition&#34;] AnalyticsScheduler[&#34;Analytics Scheduler (Leader) - DAG Planning - Placement Decisions&#34;] AnalyticsBarn[&#34;Analytics Barn (KV Store) - BadgerDB (Local)&#34;] AnalyticsGovernance[&#34;Analytics Governance Service - Lineage - Quality - Contracts&#34;] AnalyticsSecrets[&#34;Analytics Secrets Manager - Raft-backed Secret Storage&#34;] AnalyticsRaft[&#34;Analytics Raft Group (5 Nodes) (etcd-io/raft)&#34;] end subgraph Worker_Cluster[&#34;🧱 Worker Nodes Cluster&#34;] RuniAgent[&#34;Runi Agent x100 - Node Registration - Slice Management - Metrics Collection&#34;] RuniSlice[&#34;Runi Slice (Ephemeral Container) - Herd Namespaced - Config Loaded - Secrets Injected&#34;] end Developer --&gt; | CLI/API Requests | GlobalAPI GlobalAPI --&gt; | Resolve Herd Assignment | HerdDirectory GlobalAPI --&gt; | Finance Pipelines | FinanceScheduler GlobalAPI --&gt; | Analytics Pipelines | AnalyticsScheduler FinanceScheduler --&gt; | DAG and Placement Reads | FinanceBarn FinanceGovernance --&gt; | Metadata/Lineage Writes | FinanceBarn FinanceSecrets --&gt; | Secrets CRUD | FinanceBarn FinanceBarn --&gt; | Log Replication | FinanceRaft AnalyticsScheduler --&gt; | DAG and Placement Reads | AnalyticsBarn AnalyticsGovernance --&gt; | Metadata/Lineage Writes | AnalyticsBarn AnalyticsSecrets --&gt; | Secrets CRUD | AnalyticsBarn AnalyticsBarn --&gt; | Log Replication | AnalyticsRaft FinanceScheduler --&gt; | Dispatch Finance Slices | RuniAgent AnalyticsScheduler --&gt; | Dispatch Analytics Slices | RuniAgent RuniAgent --&gt; | Launch with Herd Isolation | RuniSlice RuniAgent --&gt; | Fetch Finance Secrets | FinanceSecrets RuniAgent --&gt; | Fetch Analytics Secrets | AnalyticsSecrets RuniSlice --&gt; | Emit Lineage Events | FinanceGovernance RuniSlice --&gt; | Emit Lineage Events | AnalyticsGovernance RuniSlice --&gt; | Expose Service Port | RuniAgent RuniAgent --&gt; | Port-Forwarded Access | Developer 🛠️ Prerequisites Ensure you have:</description>
    </item>
    <item>
      <title>Schema Contracts</title>
      <link>http://localhost:1313/docs/schema-contracts/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/schema-contracts/index.html</guid>
      <description>Schema &amp; Contract Management – Runink Runink enables data contracts as native Go structs — giving you strong typing, version tracking, schema validation, and backward compatibility across pipelines.&#xA;This guide shows how to define, version, test, and enforce schema contracts in your pipelines.&#xA;📦 What Is a Contract? A contract in Runink is a schema definition used to:&#xA;Validate incoming and outgoing data Detect schema drift Provide PII and RBAC tagging Drive pipeline generation and testing Contracts are generated from Go structs annotated with tags.</description>
    </item>
    <item>
      <title>Security &amp; RBAC</title>
      <link>http://localhost:1313/docs/security/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/security/index.html</guid>
      <description>Supported Versions We currently support the latest major release of pipetool. Older versions may not receive security updates or patches.&#xA;Reporting a Vulnerability If you discover a security vulnerability, please do not open a public issue.&#xA;Instead, contact us directly:&#xA;Email: security@yourdomain.org PGP Key: https://yourdomain.org/pgp.key (optional) We aim to respond to all security reports within 5 business days. All disclosures will be handled confidentially and professionally.&#xA;Disclosure Process Vulnerability reported via email Maintainers investigate and validate the issue A patch is prepared and tested privately Coordinated disclosure timeline is agreed upon with reporter Advisory + patched release are published Hall of Fame We may credit contributors who report valid vulnerabilities in our release notes, changelogs, or SECURITY.md — with consent.</description>
    </item>
  </channel>
</rss>