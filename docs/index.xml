<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Runink Docs on Runink</title><link>https://runink.org/docs/</link><description>Recent content in Runink Docs on Runink</description><generator>Hugo</generator><language>en</language><atom:link href="https://runink.org/docs/index.xml" rel="self" type="application/rss+xml"/><item><title>Architecture</title><link>https://runink.org/docs/architecture/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://runink.org/docs/architecture/</guid><description>&lt;h1 id="runink-architecture-golinux-native-distributed-data-environment">Runink Architecture: Go/Linux Native Distributed Data Environment&lt;/h1>
&lt;p>Self-sufficient, distributed environment for orchestrating and executing data pipelines using Go and Linux primitives. This system acts as the cluster resource manager and scheduler (replacing Slurm), provides Kubernetes-like logical isolation and RBAC, integrates data governance features, and ensures robust security and observability. It aims for high efficiency by avoiding traditional virtualization or container runtimes like Docker. Define a self-sufficient, distributed environment for orchestrating and executing data pipelines using Go and Linux primitives, with enhanced metadata capabilities designed to support standard data governance (lineage, catalog) AND future integration of LLM-generated annotations.&lt;/p></description></item><item><title>Components</title><link>https://runink.org/docs/components/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://runink.org/docs/components/</guid><description>&lt;h1 id="runink-platform-components">Runink Platform Components&lt;/h1>
&lt;p>This page describes the core building blocks of Runink — from the API server to slices — that make up the distributed data environment. Each component serves a purpose in ensuring secure, auditable, and high-performance pipeline execution.&lt;/p>
&lt;h2 id="components-table">Components Table&lt;/h2>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Component&lt;/th>
 &lt;th>Role&lt;/th>
 &lt;th>Location&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>API Server&lt;/td>
 &lt;td>Entry point, AuthN/Z, coordination&lt;/td>
 &lt;td>Control Plane&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>Identity Manager&lt;/td>
 &lt;td>OIDC/JWT validation and RBAC enforcement&lt;/td>
 &lt;td>Control Plane&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>Barn&lt;/td>
 &lt;td>Raft-backed KV store&lt;/td>
 &lt;td>Control Plane&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>Scheduler&lt;/td>
 &lt;td>DAG-aware placement engine&lt;/td>
 &lt;td>Control Plane&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>Secrets Manager&lt;/td>
 &lt;td>Encrypted secret storage and delivery&lt;/td>
 &lt;td>Control Plane&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>Governance Svc&lt;/td>
 &lt;td>Lineage, quality, LLM annotations&lt;/td>
 &lt;td>Control Plane&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>Runi Agent&lt;/td>
 &lt;td>Worker orchestrator (cgroup+namespace)&lt;/td>
 &lt;td>Worker Node&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>Runi Slice&lt;/td>
 &lt;td>Executed unit of pipeline logic&lt;/td>
 &lt;td>Worker Node&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>Herd&lt;/td>
 &lt;td>Tenant boundary and resource isolation&lt;/td>
 &lt;td>System-wide&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>Contracts&lt;/td>
 &lt;td>Data validation and schema enforcement&lt;/td>
 &lt;td>Contracts repo&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>DSL Parser&lt;/td>
 &lt;td>Converts &lt;code>.dsl&lt;/code> to Go DAGs&lt;/td>
 &lt;td>Build pipeline&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;hr>
&lt;h2 id="runink-services">Runink Services&lt;/h2>
&lt;h3 id="-contract-engine">📘 Contract Engine&lt;/h3>
&lt;p>All data contracts (schemas) are defined in Go structs, with support for:&lt;/p></description></item><item><title>Benchmark</title><link>https://runink.org/docs/benchmark/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://runink.org/docs/benchmark/</guid><description>&lt;h2 id="1-architecture--paradigm">1. Architecture &amp;amp; Paradigm&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Runink:&lt;/strong> A Go/Linux-native, vertically integrated data platform that combines execution, scheduling, governance, and observability in a single runtime. Unlike traditional stacks, Runink does not rely on Kubernetes or external orchestrators. Instead, it uses a &lt;strong>Raft-based control plane&lt;/strong> to ensure high availability and consensus across services like scheduling, metadata, and security — forming a distributed operating model purpose-built for data.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Competitors:&lt;/strong> Use a layered, loosely coupled stack:&lt;/p></description></item><item><title>CLI Reference</title><link>https://runink.org/docs/cli/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://runink.org/docs/cli/</guid><description>&lt;h1 id="-runink-cli-reference-runi">🧰 Runink CLI Reference (&lt;code>runi&lt;/code>)&lt;/h1>
&lt;p>The &lt;code>runi&lt;/code> CLI is the command-line interface to everything in the &lt;strong>Runink&lt;/strong> data platform. It’s your developer-first companion for defining, testing, running, securing, and publishing data pipelines — all from declarative &lt;code>.dsl&lt;/code> files and Go-native contracts.&lt;/p>
&lt;p>This reference describes all available commands, grouped by capability.&lt;/p>
&lt;hr>
&lt;h2 id="-project--pipeline-lifecycle">🧱 Project &amp;amp; Pipeline Lifecycle&lt;/h2>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Command&lt;/th>
 &lt;th>Description&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>&lt;code>runi herd init [project-name]&lt;/code>&lt;/td>
 &lt;td>Scaffold a new workspace with starter contracts, features, CI config&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>runi compile --scenario &amp;lt;file&amp;gt;&lt;/code>&lt;/td>
 &lt;td>Generate Go pipeline code from &lt;code>.dsl&lt;/code> files&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>runi run --scenario &amp;lt;file&amp;gt; --contract &amp;lt;contract.json&amp;gt;&lt;/code>&lt;/td>
 &lt;td>Run pipelines locally or remotely&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>runi watch --scenario &amp;lt;file&amp;gt;&lt;/code>&lt;/td>
 &lt;td>Auto-compile &amp;amp; re-run scenario on save&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;hr>
&lt;h2 id="-schema--contract-management">📁 Schema &amp;amp; Contract Management&lt;/h2>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Command&lt;/th>
 &lt;th>Description&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>&lt;code>runi contract gen --struct &amp;lt;pkg.Type&amp;gt;&lt;/code>&lt;/td>
 &lt;td>Generate a contract from Go struct&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>runi contract diff --old v1.json --new v2.json&lt;/code>&lt;/td>
 &lt;td>Show schema drift between versions&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>runi contract rollback&lt;/code>&lt;/td>
 &lt;td>Revert to previous contract version&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>runi contract history --name &amp;lt;contract&amp;gt;&lt;/code>&lt;/td>
 &lt;td>Show all versions and changelog entries&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>runi contract validate --file &amp;lt;file&amp;gt;&lt;/code>&lt;/td>
 &lt;td>Validate a file against a contract&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>runi contract catalog&lt;/code>&lt;/td>
 &lt;td>Create an index of all contracts in the repo&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>runi contract hash&lt;/code>&lt;/td>
 &lt;td>Generate contract hash for versioning&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;hr>
&lt;h2 id="-testing--data-validation">🧪 Testing &amp;amp; Data Validation&lt;/h2>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Command&lt;/th>
 &lt;th>Description&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>&lt;code>runi synth --dsl feature.dsl --contract feature.contract --golden input.golden&lt;/code>&lt;/td>
 &lt;td>Generate synthetic golden test data based on golden files&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>runi audit --dsl feature.dsl --contract feature.contract --golden input.golden&lt;/code>&lt;/td>
 &lt;td>Validate pipeline against contract using golden files&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;hr>
&lt;h2 id="-security-publishing--compliance">🔐 Security, Publishing &amp;amp; Compliance&lt;/h2>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Command&lt;/th>
 &lt;th>Description&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>&lt;code>runi secure [--sbom|--sign|--scan]&lt;/code>&lt;/td>
 &lt;td>Run security audits and generate SBOM&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>runi publish&lt;/code>&lt;/td>
 &lt;td>Push metadata, lineage, and contracts to registry&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>runi sbom export [--format spdx]&lt;/code>&lt;/td>
 &lt;td>Export SPDX-compliant software bill of materials&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>runi changelog gen&lt;/code>&lt;/td>
 &lt;td>Generate changelogs from contract/feature diffs&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;hr>
&lt;h2 id="-observability--lineage">🔍 Observability &amp;amp; Lineage&lt;/h2>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Command&lt;/th>
 &lt;th>Description&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>&lt;code>runi lineage --run-id &amp;lt;uuid&amp;gt;&lt;/code>&lt;/td>
 &lt;td>Show DAG lineage for a run&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>runi lineage track --source A --sink B&lt;/code>&lt;/td>
 &lt;td>Manually link lineage metadata&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>runi lineage graph --out file.dot&lt;/code>&lt;/td>
 &lt;td>Export lineage graph in DOT format&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>runi metadata get --key &amp;lt;name&amp;gt;&lt;/code>&lt;/td>
 &lt;td>Retrieve stored metadata for a step&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>runi metadata annotate --key &amp;lt;name&amp;gt;&lt;/code>&lt;/td>
 &lt;td>Attach annotation to pipeline metadata&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>runi logs --run-id &amp;lt;uuid&amp;gt;&lt;/code>&lt;/td>
 &lt;td>View logs for a specific run&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>runi status --run-id &amp;lt;uuid&amp;gt;&lt;/code>&lt;/td>
 &lt;td>Check status of a pipeline execution&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;hr>
&lt;h2 id="-distributed-execution-remote">🤖 Distributed Execution (Remote)&lt;/h2>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Command&lt;/th>
 &lt;th>Description&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>&lt;code>runi deploy --target &amp;lt;k8s|local&amp;gt;&lt;/code>&lt;/td>
 &lt;td>Deploy Runi workers to a local or remote cluster&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>runi start --slice &amp;lt;file&amp;gt; --herd &amp;lt;namespace&amp;gt;&lt;/code>&lt;/td>
 &lt;td>Start execution of a scenario remotely&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>runi kill --run-id &amp;lt;uuid&amp;gt;&lt;/code>&lt;/td>
 &lt;td>Terminate running scenario&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;hr>
&lt;h2 id="-control-plane--agents">💪 Control Plane &amp;amp; Agents&lt;/h2>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Command&lt;/th>
 &lt;th>Description&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>&lt;code>runi herdctl create&lt;/code>&lt;/td>
 &lt;td>Create a new Herd (namespace + quotas + policies)&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>runi herdctl delete&lt;/code>&lt;/td>
 &lt;td>Delete a Herd&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>runi herdctl update&lt;/code>&lt;/td>
 &lt;td>Update Herd quotas, RBAC, metadata&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>runi herdctl list&lt;/code>&lt;/td>
 &lt;td>List all Herds and resource states&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>runi herdctl quota set &amp;lt;herd&amp;gt;&lt;/code>&lt;/td>
 &lt;td>Update CPU/mem quotas live&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>runi herdctl lineage &amp;lt;herd&amp;gt;&lt;/code>&lt;/td>
 &lt;td>View lineage graphs scoped to a Herd&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>runi agentctl list&lt;/code>&lt;/td>
 &lt;td>List active Runi agents, resource usage, labels&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>runi agentctl status &amp;lt;agent&amp;gt;&lt;/code>&lt;/td>
 &lt;td>Detailed agent status (health, registered slices, metrics)&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>runi agentctl drain &amp;lt;agent&amp;gt;&lt;/code>&lt;/td>
 &lt;td>Mark agent as unschedulable (cordon)&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>runi agentctl register&lt;/code>&lt;/td>
 &lt;td>Manually register agent (optional bootstrap)&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>runi agentctl cordon &amp;lt;agent&amp;gt;&lt;/code>&lt;/td>
 &lt;td>Prevent slice scheduling&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;hr>
&lt;h2 id="-worker-slice-management">🌐 Worker Slice Management&lt;/h2>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Command&lt;/th>
 &lt;th>Description&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>&lt;code>runi slicectl list --herd &amp;lt;id&amp;gt;&lt;/code>&lt;/td>
 &lt;td>List all active slices for a Herd&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>runi slicectl logs &amp;lt;slice-id&amp;gt;&lt;/code>&lt;/td>
 &lt;td>Fetch logs for a given slice&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>runi slicectl cancel &amp;lt;slice-id&amp;gt;&lt;/code>&lt;/td>
 &lt;td>Cancel a running slice gracefully&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>runi slicectl metrics &amp;lt;slice-id&amp;gt;&lt;/code>&lt;/td>
 &lt;td>Show real-time metrics for a slice&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>runi slicectl promote &amp;lt;slice-id&amp;gt;&lt;/code>&lt;/td>
 &lt;td>Checkpoint a slice mid-run&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;hr>
&lt;h2 id="-introspection--visualization">🔀 Introspection &amp;amp; Visualization&lt;/h2>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Command&lt;/th>
 &lt;th>Description&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>&lt;code>runi explain --scenario &amp;lt;file&amp;gt;&lt;/code>&lt;/td>
 &lt;td>Describe DAG and step resolution logic&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>runi graphviz --scenario &amp;lt;file&amp;gt;&lt;/code>&lt;/td>
 &lt;td>Render DAG as a .png, .svg, or .dot&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>runi diff --feature old.dsl --feature new.dsl&lt;/code>&lt;/td>
 &lt;td>Compare feature files and show logic drift&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;hr>
&lt;h2 id="-repl--exploratory-commands">🧪 REPL &amp;amp; Exploratory Commands&lt;/h2>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Command&lt;/th>
 &lt;th>Description&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>&lt;code>runi repl&lt;/code>&lt;/td>
 &lt;td>Launch interactive DataFrame, SQL, JSON REPL&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>runi json explore -f file.json -q '.email'&lt;/code>&lt;/td>
 &lt;td>Run jq-style query on JSON&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>runi query -e &amp;quot;SELECT * FROM dataset&amp;quot;&lt;/code>&lt;/td>
 &lt;td>Run SQL-like query on scenario input&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;hr>
&lt;h2 id="-dev-tools--generators">🛠️ Dev Tools &amp;amp; Generators&lt;/h2>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Command&lt;/th>
 &lt;th>Description&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>&lt;code>runi gen --dsl input.json&lt;/code>&lt;/td>
 &lt;td>Generate feature from sample input&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>runi contract from-feature &amp;lt;file&amp;gt;&lt;/code>&lt;/td>
 &lt;td>Extract contract from &lt;code>.dsl&lt;/code> spec&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>runi schema hash&lt;/code>&lt;/td>
 &lt;td>Generate contract fingerprint&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>runi bump&lt;/code>&lt;/td>
 &lt;td>Auto-increment contract version with changelog&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;hr>
&lt;h2 id="-plugins--extensions">🧹 Plugins &amp;amp; Extensions&lt;/h2>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Command&lt;/th>
 &lt;th>Description&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>&lt;code>runi plugin install &amp;lt;url&amp;gt;&lt;/code>&lt;/td>
 &lt;td>Install external plugin&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>runi plugin list&lt;/code>&lt;/td>
 &lt;td>List installed extensions&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>runi plugin run &amp;lt;name&amp;gt;&lt;/code>&lt;/td>
 &lt;td>Execute a plugin subcommand&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;hr>
&lt;h2 id="-packaging--cicd">📦 Packaging &amp;amp; CI/CD&lt;/h2>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Command&lt;/th>
 &lt;th>Description&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>&lt;code>runi build&lt;/code>&lt;/td>
 &lt;td>Compile pipeline bundle for remote use&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>runi pack&lt;/code>&lt;/td>
 &lt;td>Zip workspace for deployment/distribution&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>runi upgrade&lt;/code>&lt;/td>
 &lt;td>Self-update the CLI and plugins&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>runi doctor&lt;/code>&lt;/td>
 &lt;td>Diagnose CLI and project setup&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;hr>
&lt;h2 id="-runtime-lifecycle">📅 Runtime Lifecycle&lt;/h2>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Command&lt;/th>
 &lt;th>Description&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>&lt;code>runi restart --run-id &amp;lt;uuid&amp;gt;&lt;/code>&lt;/td>
 &lt;td>Restart a pipeline from last successful checkpoint&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>runi resume --run-id &amp;lt;uuid&amp;gt;&lt;/code>&lt;/td>
 &lt;td>Resume paused pipeline without reprocessing&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>runi checkpoint --scenario &amp;lt;file&amp;gt;&lt;/code>&lt;/td>
 &lt;td>Create a persistent step-based checkpoint marker&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;hr>
&lt;h2 id="-collaboration--governance">💬 Collaboration &amp;amp; Governance&lt;/h2>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Command&lt;/th>
 &lt;th>Description&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>&lt;code>runi comment --contract &amp;lt;file&amp;gt;&lt;/code>&lt;/td>
 &lt;td>Leave inline comments for review (contract-level QA)&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>runi request-approval --contract &amp;lt;file&amp;gt;&lt;/code>&lt;/td>
 &lt;td>Submit contract for governance approval&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>runi feedback --scenario &amp;lt;file&amp;gt;&lt;/code>&lt;/td>
 &lt;td>Attach review notes to a scenario&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;hr>
&lt;h2 id="-privacy-redaction--data-escrow">🛡️ Privacy, Redaction &amp;amp; Data Escrow&lt;/h2>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Command&lt;/th>
 &lt;th>Description&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>&lt;code>runi redact --contract &amp;lt;file&amp;gt;&lt;/code>&lt;/td>
 &lt;td>Automatically redact PII based on tags&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>runi escrow --run-id &amp;lt;uuid&amp;gt;&lt;/code>&lt;/td>
 &lt;td>Encrypt pipeline outputs for future unsealing&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>runi anonymize --input &amp;lt;file&amp;gt;&lt;/code>&lt;/td>
 &lt;td>Generate synthetic version of a sensitive input file&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;hr>
&lt;h2 id="-event-based-execution">🗓 Event-Based Execution&lt;/h2>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Command&lt;/th>
 &lt;th>Description&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>&lt;code>runi trigger --on &amp;lt;webhook|s3|pubsub&amp;gt;&lt;/code>&lt;/td>
 &lt;td>Set up trigger-based pipeline starts&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>runi listen --event &amp;lt;type&amp;gt;&lt;/code>&lt;/td>
 &lt;td>Listen for external event to start scenario&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>runi subscribe --stream &amp;lt;source&amp;gt;&lt;/code>&lt;/td>
 &lt;td>Subscribe to stream source with offset recovery&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;hr>
&lt;h2 id="-pipeline--contract-lifecycle">🔄 Pipeline &amp;amp; Contract Lifecycle&lt;/h2>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Command&lt;/th>
 &lt;th>Description&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>&lt;code>runi freeze --scenario &amp;lt;file&amp;gt;&lt;/code>&lt;/td>
 &lt;td>Lock DAG hash and contract state as immutable&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>runi archive --herd &amp;lt;name&amp;gt; --keep &amp;lt;N&amp;gt;&lt;/code>&lt;/td>
 &lt;td>Archive old scenarios/runs beyond retention policy&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>runi retire --contract &amp;lt;file&amp;gt;&lt;/code>&lt;/td>
 &lt;td>Deprecate contract from active use&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;hr>
&lt;h2 id="-metadata-graph--semantic-search">🧬 Metadata Graph &amp;amp; Semantic Search&lt;/h2>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Command&lt;/th>
 &lt;th>Description&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>&lt;code>runi knowledge export --format turtle&lt;/code>&lt;/td>
 &lt;td>Export contract and DAG metadata as RDF&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>runi query lineage&lt;/code>&lt;/td>
 &lt;td>Run SQL-style queries across lineage metadata&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;hr>
&lt;blockquote>
&lt;p>💬 Use &lt;code>runi &amp;lt;command&amp;gt; --help&lt;/code> for flags, options, and examples.&lt;/p></description></item><item><title>CLI Help Commands</title><link>https://runink.org/docs/clihelp/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://runink.org/docs/clihelp/</guid><description>&lt;h1 id="-runink-cli-help-template">🆘 Runink CLI: Help Template&lt;/h1>
&lt;p>This is a developer-friendly help template for implementing consistent &lt;code>runi &amp;lt;command&amp;gt; --help&lt;/code> outputs.&lt;/p>
&lt;hr>
&lt;h2 id="-format-basic-help-command">🧱 Format: Basic Help Command&lt;/h2>
&lt;pre tabindex="0">&lt;code>runi &amp;lt;command&amp;gt; [subcommand] [flags]

Usage:
 runi &amp;lt;command&amp;gt; [options]

Options:
 -h, --help Show this help message and exit
 -v, --verbose Show detailed logs and diagnostics
&lt;/code>&lt;/pre>&lt;hr>
&lt;h2 id="example-runi-init---help">Example: &lt;code>runi init --help&lt;/code>&lt;/h2>
&lt;pre tabindex="0">&lt;code>Initialize a new Runink project.

Usage:
 runi init [project-name]

Flags:
 -h, --help Show help for init
&lt;/code>&lt;/pre>&lt;hr>
&lt;h2 id="-example-runi-compile---help">🔄 Example: &lt;code>runi compile --help&lt;/code>&lt;/h2>
&lt;pre tabindex="0">&lt;code>runi compile --scenario &amp;lt;file.dsl&amp;gt;

Description:
 Compile a `.dsl` scenario and its contract into an executable Go DAG.
 Generates a Go file under `rendered/` based on contract-linked step tags.

Usage:
 runi compile --scenario features/trade_cdm.dsl

Flags:
 --scenario Path to a DSL scenario file
 --out Optional: custom output path for DAG (default: rendered/&amp;lt;name&amp;gt;.go)
 --dry-run Only validate scenario and contract, do not write DAG
 --verbose Show full DAG step resolution logs
&lt;/code>&lt;/pre>&lt;hr>
&lt;h2 id="-example-runi-test---help">🧪 Example: &lt;code>runi test --help&lt;/code>&lt;/h2>
&lt;pre tabindex="0">&lt;code>runi test --scenario &amp;lt;file.dsl&amp;gt;

Description:
 Execute a feature scenario with golden test inputs and compare output.
 Supports diff mode and golden update flows.

Usage:
 runi test --scenario features/onboard.dsl

Flags:
 --scenario DSL file to test
 --golden Optional: override path to golden test folder
 --update Automatically update golden output on success
 --only &amp;lt;step&amp;gt; Run test up to a specific pipeline step
&lt;/code>&lt;/pre>&lt;hr>
&lt;h2 id="-example-runi-contract-gen---help">🔐 Example: &lt;code>runi contract gen --help&lt;/code>&lt;/h2>
&lt;pre tabindex="0">&lt;code>runi contract gen --struct &amp;lt;package.Type&amp;gt; --out &amp;lt;file&amp;gt;

Description:
 Generate a JSON contract definition from a Go struct. Includes schema, access tags, and validation metadata.

Usage:
 runi contract gen --struct contracts.Customer --out contracts/customer.json

Flags:
 --struct Fully qualified Go type (e.g. contracts.Customer)
 --out Output contract file path
 --flatten Inline nested types into flat fields
 --herd Optional: attach to specific herd (e.g. finance)
&lt;/code>&lt;/pre>&lt;hr>
&lt;hr>
&lt;h2 id="runi-contract-diff---help">&lt;code>runi contract diff --help&lt;/code>&lt;/h2>
&lt;pre tabindex="0">&lt;code>Diff two versions of a contract and show schema drift.

Usage:
 runi contract diff --old v1.json --new v2.json
&lt;/code>&lt;/pre>&lt;hr>
&lt;h2 id="runi-run---help">&lt;code>runi run --help&lt;/code>&lt;/h2>
&lt;pre tabindex="0">&lt;code>Run a compiled pipeline with data inputs.

Usage:
 runi run --scenario &amp;lt;file.dsl&amp;gt; [--contract file] [--herd name]

Flags:
 --scenario Scenario to execute
 --contract Optional explicit contract
 --herd Herd to run pipeline in
 --dry-run Preview DAG resolution only
&lt;/code>&lt;/pre>&lt;hr>
&lt;h2 id="runi-lineage---help">&lt;code>runi lineage --help&lt;/code>&lt;/h2>
&lt;pre tabindex="0">&lt;code>Show lineage metadata for a run.

Usage:
 runi lineage --run-id &amp;lt;id&amp;gt;

Flags:
 --run-id Unique run identifier
 --output Format (json|csv|graph)
&lt;/code>&lt;/pre>&lt;hr>
&lt;h2 id="runi-publish---help">&lt;code>runi publish --help&lt;/code>&lt;/h2>
&lt;pre tabindex="0">&lt;code>Publish contracts, lineage, and tags to metadata registry.

Usage:
 runi publish --herd &amp;lt;name&amp;gt; [--scenario file]
&lt;/code>&lt;/pre>&lt;hr>
&lt;h2 id="runi-repl---help">&lt;code>runi repl --help&lt;/code>&lt;/h2>
&lt;pre tabindex="0">&lt;code>Start interactive REPL for querying test inputs or contract data.

Usage:
 runi repl --scenario &amp;lt;path&amp;gt;
&lt;/code>&lt;/pre>&lt;hr>
&lt;h2 id="-example-runi-deploy---help">🤖 Example: &lt;code>runi deploy --help&lt;/code>&lt;/h2>
&lt;pre tabindex="0">&lt;code>runi deploy --target &amp;lt;target&amp;gt;

Description:
 Deploy Runi workers and slices to a remote orchestration cluster.

Usage:
 runi deploy --target k8s

Flags:
 --target Target platform (k8s, bigmachine)
 --herd Herd (namespace) to deploy into
 --dry-run Simulate deployment without applying
 --confirm Require manual confirmation for remote changes
&lt;/code>&lt;/pre>&lt;hr>
&lt;h2 id="runi-schedule---help">&lt;code>runi schedule --help&lt;/code>&lt;/h2>
&lt;pre tabindex="0">&lt;code>Schedule a pipeline scenario for recurring execution.

Usage:
 runi schedule --scenario &amp;lt;file&amp;gt; --cron &amp;#34;0 6 * * *&amp;#34;

Flags:
 --scenario DSL file
 --cron Cron-style expression
&lt;/code>&lt;/pre>&lt;hr>
&lt;h2 id="runi-audit---help">&lt;code>runi audit --help&lt;/code>&lt;/h2>
&lt;pre tabindex="0">&lt;code>Show schema contract change history and approvals.

Usage:
 runi audit --contract &amp;lt;file&amp;gt;
&lt;/code>&lt;/pre>&lt;hr>
&lt;hr>
&lt;h2 id="runi-restart---help">&lt;code>runi restart --help&lt;/code>&lt;/h2>
&lt;pre tabindex="0">&lt;code>Restart a failed or incomplete pipeline run from its last checkpoint.

Usage:
 runi restart --run-id &amp;lt;uuid&amp;gt;

Flags:
 --run-id Run ID to restart from
 --force Ignore checkpoint and rerun from start
&lt;/code>&lt;/pre>&lt;hr>
&lt;h2 id="runi-resume---help">&lt;code>runi resume --help&lt;/code>&lt;/h2>
&lt;pre tabindex="0">&lt;code>Resume an interrupted or paused pipeline.

Usage:
 runi resume --run-id &amp;lt;uuid&amp;gt;
&lt;/code>&lt;/pre>&lt;hr>
&lt;h2 id="runi-checkpoint---help">&lt;code>runi checkpoint --help&lt;/code>&lt;/h2>
&lt;pre tabindex="0">&lt;code>Create a DAG state checkpoint for partial run recovery.

Usage:
 runi checkpoint --scenario &amp;lt;file&amp;gt;
&lt;/code>&lt;/pre>&lt;hr>
&lt;h2 id="runi-comment---help">&lt;code>runi comment --help&lt;/code>&lt;/h2>
&lt;pre tabindex="0">&lt;code>Leave inline comments for contracts or fields (used in review tools).

Usage:
 runi comment --contract &amp;lt;file&amp;gt; --field &amp;lt;path&amp;gt; --note &amp;lt;text&amp;gt;
&lt;/code>&lt;/pre>&lt;hr>
&lt;h2 id="runi-request-approval---help">&lt;code>runi request-approval --help&lt;/code>&lt;/h2>
&lt;pre tabindex="0">&lt;code>Submit a contract for governance approval and audit.

Usage:
 runi request-approval --contract &amp;lt;file&amp;gt;
&lt;/code>&lt;/pre>&lt;hr>
&lt;h2 id="runi-feedback---help">&lt;code>runi feedback --help&lt;/code>&lt;/h2>
&lt;pre tabindex="0">&lt;code>Attach feedback note to a scenario feature for peer review.

Usage:
 runi feedback --scenario &amp;lt;file&amp;gt; --note &amp;lt;text&amp;gt;
&lt;/code>&lt;/pre>&lt;hr>
&lt;h2 id="runi-redact---help">&lt;code>runi redact --help&lt;/code>&lt;/h2>
&lt;pre tabindex="0">&lt;code>Automatically redact fields marked pii:&amp;#34;true&amp;#34; in a contract schema.

Usage:
 runi redact --contract &amp;lt;file&amp;gt; --out &amp;lt;file&amp;gt;
&lt;/code>&lt;/pre>&lt;hr>
&lt;h2 id="runi-escrow---help">&lt;code>runi escrow --help&lt;/code>&lt;/h2>
&lt;pre tabindex="0">&lt;code>Encrypt and store output data for delayed release or approval.

Usage:
 runi escrow --run-id &amp;lt;uuid&amp;gt; --out &amp;lt;vault.json&amp;gt;
&lt;/code>&lt;/pre>&lt;hr>
&lt;h2 id="runi-anonymize---help">&lt;code>runi anonymize --help&lt;/code>&lt;/h2>
&lt;pre tabindex="0">&lt;code>Create a non-sensitive version of input using faker + tags.

Usage:
 runi anonymize --input &amp;lt;file&amp;gt; --contract &amp;lt;file&amp;gt; --out &amp;lt;file&amp;gt;
&lt;/code>&lt;/pre>&lt;hr>
&lt;h2 id="runi-trigger---help">&lt;code>runi trigger --help&lt;/code>&lt;/h2>
&lt;pre tabindex="0">&lt;code>Define an event trigger for this scenario.

Usage:
 runi trigger --scenario &amp;lt;file&amp;gt; --on webhook|s3|pubsub
&lt;/code>&lt;/pre>&lt;hr>
&lt;h2 id="runi-listen---help">&lt;code>runi listen --help&lt;/code>&lt;/h2>
&lt;pre tabindex="0">&lt;code>Start a listener to monitor incoming event and dispatch pipeline.

Usage:
 runi listen --event &amp;lt;type&amp;gt;
&lt;/code>&lt;/pre>&lt;hr>
&lt;h2 id="runi-subscribe---help">&lt;code>runi subscribe --help&lt;/code>&lt;/h2>
&lt;pre tabindex="0">&lt;code>Subscribe to a streaming topic or channel with offset tracking.

Usage:
 runi subscribe --stream &amp;lt;topic&amp;gt; --window 5m
&lt;/code>&lt;/pre>&lt;hr>
&lt;h2 id="runi-freeze---help">&lt;code>runi freeze --help&lt;/code>&lt;/h2>
&lt;pre tabindex="0">&lt;code>Freeze contract + scenario versions with hashes for snapshot validation.

Usage:
 runi freeze --scenario &amp;lt;file&amp;gt;
&lt;/code>&lt;/pre>&lt;hr>
&lt;h2 id="runi-archive---help">&lt;code>runi archive --help&lt;/code>&lt;/h2>
&lt;pre tabindex="0">&lt;code>Archive old versions of scenarios and their runs by herd.

Usage:
 runi archive --herd &amp;lt;name&amp;gt; --keep 3
&lt;/code>&lt;/pre>&lt;hr>
&lt;h2 id="runi-retire---help">&lt;code>runi retire --help&lt;/code>&lt;/h2>
&lt;pre tabindex="0">&lt;code>Retire a contract so it cannot be used in future scenarios.

Usage:
 runi retire --contract &amp;lt;file&amp;gt;
&lt;/code>&lt;/pre>&lt;hr>
&lt;h2 id="runi-lineage-graph---help">&lt;code>runi lineage graph --help&lt;/code>&lt;/h2>
&lt;pre tabindex="0">&lt;code>Export full DAG and contract lineage as GraphViz dot file.

Usage:
 runi lineage graph --out lineage.dot
&lt;/code>&lt;/pre>&lt;hr>
&lt;h2 id="runi-knowledge-export---help">&lt;code>runi knowledge export --help&lt;/code>&lt;/h2>
&lt;pre tabindex="0">&lt;code>Export pipeline metadata using RDF serialization (Turtle/N-Triples).

Usage:
 runi knowledge export --format turtle
&lt;/code>&lt;/pre>&lt;hr>
&lt;h2 id="runi-query-lineage---help">&lt;code>runi query lineage --help&lt;/code>&lt;/h2>
&lt;pre tabindex="0">&lt;code>Query lineage metadata using SQL-like syntax.

Usage:
 runi query lineage --sql &amp;#34;SELECT * WHERE pii = true&amp;#34;
&lt;/code>&lt;/pre>&lt;hr>
&lt;h2 id="runi-openai-audit---help">&lt;code>runi openai audit --help&lt;/code>&lt;/h2>
&lt;pre tabindex="0">&lt;code>Use an LLM to summarize contract diffs or suggest field comments.

Usage:
 runi openai audit --contract &amp;lt;file&amp;gt;
&lt;/code>&lt;/pre>&lt;hr>
&lt;h2 id="runi-sandbox---help">&lt;code>runi sandbox --help&lt;/code>&lt;/h2>
&lt;pre tabindex="0">&lt;code>Execute scenario in a secure ephemeral environment.

Usage:
 runi sandbox --scenario &amp;lt;file&amp;gt;
&lt;/code>&lt;/pre>&lt;hr>
&lt;h2 id="runi-simulate---help">&lt;code>runi simulate --help&lt;/code>&lt;/h2>
&lt;pre tabindex="0">&lt;code>Replay input data as a stream window to test stateful logic.

Usage:
 runi simulate --input &amp;lt;file&amp;gt; --window 5m
&lt;/code>&lt;/pre>&lt;hr>
&lt;h2 id="runi-mint-token---help">&lt;code>runi mint-token --help&lt;/code>&lt;/h2>
&lt;pre tabindex="0">&lt;code>Generate a short-lived JWT for scoped access by herd or scenario.

Usage:
 runi mint-token --herd finance --role analyst --ttl 5m
&lt;/code>&lt;/pre>&lt;hr>
&lt;h2 id="-best-practices">🧠 Best Practices&lt;/h2>
&lt;ul>
&lt;li>✅ Describe what the command &lt;strong>does&lt;/strong>, not how it&amp;rsquo;s implemented&lt;/li>
&lt;li>✅ Include at least 1 usage example&lt;/li>
&lt;li>✅ Use consistent flags: &lt;code>--scenario&lt;/code>, &lt;code>--contract&lt;/code>, &lt;code>--out&lt;/code>, &lt;code>--herd&lt;/code>&lt;/li>
&lt;li>✅ Provide guidance for &lt;code>--dry-run&lt;/code>, &lt;code>--verbose&lt;/code>, &lt;code>--help&lt;/code>&lt;/li>
&lt;li>✅ Include multi-step examples if command touches multiple files&lt;/li>
&lt;/ul>
&lt;hr></description></item><item><title>Contributing</title><link>https://runink.org/docs/contributing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://runink.org/docs/contributing/</guid><description>&lt;h1 id="-contributing-to-runink">🤝 Contributing to Runink&lt;/h1>
&lt;p>Welcome! First off, thank you for considering contributing to &lt;strong>Runink&lt;/strong>. We deeply appreciate your support and effort to improve our project.&lt;/p>
&lt;p>This document will guide you through the process of contributing code, filing issues, suggesting features, and participating in the Runink community.&lt;/p>
&lt;hr>
&lt;h2 id="-code-of-conduct">📜 Code of Conduct&lt;/h2>
&lt;p>We expect everyone participating to adhere to our &lt;a href="https://github.com/paesdan/runink/main/CODE_OF_CONDUCT.md">Code of Conduct&lt;/a>. Respect and kindness are the foundation.&lt;/p>
&lt;hr>
&lt;h2 id="-how-to-contribute">🛠️ How to Contribute&lt;/h2>
&lt;h3 id="1-fork-the-repo">1. Fork the Repo&lt;/h3>
&lt;p>Use GitHub&amp;rsquo;s &amp;ldquo;Fork&amp;rdquo; button to create a personal copy of the repository.&lt;/p></description></item><item><title>Data Lineage</title><link>https://runink.org/docs/data-lineage/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://runink.org/docs/data-lineage/</guid><description>&lt;h1 id="data-lineage--metadata-tracking--runink">Data Lineage &amp;amp; Metadata Tracking – Runink&lt;/h1>
&lt;p>Runink pipelines are designed to be fully &lt;strong>traceable&lt;/strong>, &lt;strong>auditable&lt;/strong>, and &lt;strong>schema-aware&lt;/strong>. With built-in lineage support, every pipeline can generate:&lt;/p>
&lt;ul>
&lt;li>Visual DAGs of data flow and dependencies&lt;/li>
&lt;li>Metadata snapshots with schema versions and field hashes&lt;/li>
&lt;li>Run-level logs for audit, debugging, and compliance&lt;/li>
&lt;/ul>
&lt;p>This guide walks through how Runink enables robust &lt;strong>data observability&lt;/strong> and &lt;strong>governance by default&lt;/strong>.&lt;/p>
&lt;hr>
&lt;h2 id="-what-is-data-lineage">🔍 What Is Data Lineage?&lt;/h2>
&lt;p>Lineage describes where your data came from, what happened to it, and where it went.&lt;/p></description></item><item><title>Feature DSL</title><link>https://runink.org/docs/feature-dsl/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://runink.org/docs/feature-dsl/</guid><description>&lt;h1 id="-feature-dsl--authoring-pipelines-in-natural-language">📘 Feature DSL — Authoring Pipelines in Natural Language&lt;/h1>
&lt;p>Runink’s &lt;code>.dsl&lt;/code> files allow data, governance, and domain teams to write &lt;strong>declarative pipeline logic&lt;/strong> in plain English — no YAML, no code, just structured steps tied to contracts.&lt;/p>
&lt;p>Inspired by &lt;strong>Gherkin&lt;/strong> and &lt;strong>feature-driven development&lt;/strong>, the DSL is intentionally designed to:&lt;/p>
&lt;ul>
&lt;li>Align with real-world &lt;strong>data contracts&lt;/strong>&lt;/li>
&lt;li>Support &lt;strong>lineage&lt;/strong>, &lt;strong>compliance&lt;/strong>, and &lt;strong>multi-tenant governance&lt;/strong>&lt;/li>
&lt;li>Be editable by &lt;strong>non-engineers&lt;/strong> — analysts, stewards, and reviewers&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="-full-example">✨ Full Example&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-feature" data-lang="feature">&lt;span class="line">&lt;span class="cl">&lt;span class="k">Feature:&lt;/span>&lt;span class="nf"> Trade Events – Validation &amp;amp; Compliance
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">&lt;/span>&lt;span class="k">Scenario:&lt;/span>&lt;span class="nf"> Validate and Tag Incoming Financial Trade Events
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf"> Metadata:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf"> purpose: &amp;#34;Check and tag incoming trade events for compliance and data quality&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf"> module_layer: &amp;#34;Silver&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf"> herd: &amp;#34;Finance&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf"> slo: &amp;#34;99.9%&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf"> classification: &amp;#34;pii&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf"> contract: &amp;#34;cdm_trade/fdc3events.contract&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf"> contract_version: &amp;#34;1.0.0&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf"> compliance: [&amp;#34;SOX&amp;#34;, &amp;#34;GDPR&amp;#34;, &amp;#34;PCI-DSS&amp;#34;]
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf"> lineage_tracking: true
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf"> Given: &amp;#34;Arrival of Events&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf"> - source_type: stream
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf"> - name: &amp;#34;Trade Events Kafka Stream&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf"> - format: CDM
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf"> - tags: [&amp;#34;live&amp;#34;, &amp;#34;trades&amp;#34;, &amp;#34;finance&amp;#34;]
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">&lt;/span>&lt;span class="k">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k"> When &lt;/span>&lt;span class="nf">&amp;#34;&lt;/span>&lt;span class="s">Data is received&lt;/span>&lt;span class="nf">&amp;#34;:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf"> - Decode each trade event using the CDM schema
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf"> - Check for required fields: trade_id, symbol, price, timestamp
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf"> - Mask sensitive values like SSNs, emails, and bank accounts
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf"> - Tag events with classification and region
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf"> - Compare schema to the latest approved contract version
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf"> Then:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf"> - Send valid records to: snowflake table &amp;#34;&lt;/span>&lt;span class="s">Validated Trades Table&lt;/span>&lt;span class="nf">&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf"> - Send invalid records to: snowflake table &amp;#34;&lt;/span>&lt;span class="s">DLQ for Invalid Trades&lt;/span>&lt;span class="nf">&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf"> - Annotate all records with compliance and lineage metadata
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf"> Assertions:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf"> - At least &lt;/span>&lt;span class="s">1&lt;/span>&lt;span class="nf">,&lt;/span>&lt;span class="s">000&lt;/span>&lt;span class="nf"> records must be processed
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf"> - Schema drift must not be detected
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf"> - All sensitive fields must pass redaction or tokenization checks
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf"> GoldenTest:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf"> input: &amp;#34;&lt;/span>&lt;span class="s">cdm_trade/fdc3events.input&lt;/span>&lt;span class="nf">&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf"> output: &amp;#34;&lt;/span>&lt;span class="s">cdm_trade/data/fdc3events.validated.golden&lt;/span>&lt;span class="nf">&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf"> validation: strict
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf"> Notifications:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf"> - On schema failure → alert &amp;#34;&lt;/span>&lt;span class="s">alerts/finance_data_validation&lt;/span>&lt;span class="nf">&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf"> - On masking failure → alert &amp;#34;&lt;/span>&lt;span class="s">alerts/finance_security_breach&lt;/span>&lt;span class="nf">&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h2 id="-dsl-concepts">🧠 DSL Concepts&lt;/h2>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Block&lt;/th>
 &lt;th>Description&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>&lt;code>Feature&lt;/code>&lt;/td>
 &lt;td>High-level business intent (group of scenarios)&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>Scenario&lt;/code>&lt;/td>
 &lt;td>Specific pipeline run, often tied to a contract version&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>Metadata&lt;/code>&lt;/td>
 &lt;td>Tags used for governance, lineage, compliance, and SLOs&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>Given&lt;/code>&lt;/td>
 &lt;td>Declares the data source and input assumptions&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>When&lt;/code>&lt;/td>
 &lt;td>Describes logic, transformations, and validations to apply&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>Then&lt;/code>&lt;/td>
 &lt;td>Declares output actions — writing to sinks, tagging, alerts&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>Assertions&lt;/code>&lt;/td>
 &lt;td>Validate record counts, masking, schema drift, etc.&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>GoldenTest&lt;/code>&lt;/td>
 &lt;td>Points to expected inputs/outputs for regression safety&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>Notifications&lt;/code>&lt;/td>
 &lt;td>Alerts emitted when failures occur during pipeline runs&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;hr>
&lt;h2 id="-metadata-driven-pipelines">🔍 Metadata-Driven Pipelines&lt;/h2>
&lt;p>Each &lt;code>.dsl&lt;/code> is &lt;strong>contract-aware&lt;/strong> and &lt;strong>herd-scoped&lt;/strong> by default.&lt;/p></description></item><item><title>Getting Started</title><link>https://runink.org/docs/getting_started/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://runink.org/docs/getting_started/</guid><description>&lt;h1 id="getting-started-with-runink">Getting Started with Runink&lt;/h1>
&lt;p>Welcome to &lt;strong>Runink&lt;/strong>! This quick-start guide will help you get up and running with Runink to effortlessly build, test, and run data pipelines.&lt;/p>
&lt;hr>
&lt;h2 id="-1-installation">🚀 &lt;strong>1. Installation&lt;/strong>&lt;/h2>
&lt;p>Make sure you have Go installed (v1.20 or later). Then install Runink:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">go install github.com/runink/runink@latest
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Ensure &lt;code>$GOPATH/bin&lt;/code> is in your &lt;code>$PATH&lt;/code>.&lt;/p>
&lt;hr>
&lt;h2 id="-2-initialize-your-project">🛠 &lt;strong>2. Initialize Your Project&lt;/strong>&lt;/h2>
&lt;p>Create a new Runink project in seconds:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">runi init myproject
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">cd&lt;/span> myproject
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This command generates:&lt;/p></description></item><item><title>Glossary</title><link>https://runink.org/docs/glossary/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://runink.org/docs/glossary/</guid><description>&lt;h1 id="runink-glossary">Runink Glossary&lt;/h1>
&lt;p>This glossary defines key terms, acronyms, and concepts used throughout the Runink documentation and codebase.&lt;/p>
&lt;hr>
&lt;h3 id="dsl-file">.dsl File&lt;/h3>
&lt;p>A human-readable file written in Gherkin syntax used to describe a data pipeline scenario using Given/When/Then structure and tags like @source, @step, and @sink.&lt;/p>
&lt;hr>
&lt;h3 id="bdd-behavior-driven-development">BDD (Behavior-Driven Development)&lt;/h3>
&lt;p>A software development approach that describes application behavior in plain language, often used with .dsl files.&lt;/p>
&lt;hr>
&lt;h3 id="golden-file">Golden File&lt;/h3>
&lt;p>A snapshot of the expected output from a pipeline or transformation, used to assert correctness in automated tests.&lt;/p></description></item><item><title>Roadmap</title><link>https://runink.org/docs/roadmap/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://runink.org/docs/roadmap/</guid><description>&lt;h1 id="-runink-roadmap">🗺️ Runink Roadmap&lt;/h1>
&lt;p>Welcome to the official &lt;strong>Runink Roadmap&lt;/strong> — our evolving guide to what we&amp;rsquo;re building, where we’re headed, and how you can get involved.&lt;/p>
&lt;p>Runink is built on the belief that modern data platforms should be &lt;strong>safe by default&lt;/strong>, &lt;strong>composable by design&lt;/strong>, and &lt;strong>collaborative at scale&lt;/strong>. This roadmap reflects our commitment to transparency, community-driven development, and rapid iteration.&lt;/p>
&lt;hr>
&lt;h2 id="-roadmap-themes">🧩 Roadmap Themes&lt;/h2>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Theme&lt;/th>
 &lt;th>Description&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>&lt;strong>Composable Pipelines&lt;/strong>&lt;/td>
 &lt;td>Make it easy to build, reuse, and test pipeline steps across teams and domains.&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;strong>Secure &amp;amp; Compliant by Default&lt;/strong>&lt;/td>
 &lt;td>Tighten RBAC, data contracts, and observability for enterprise-grade governance.&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;strong>DevX &amp;amp; Developer Productivity&lt;/strong>&lt;/td>
 &lt;td>Empower devs with a powerful CLI, REPL, codegen, and rapid iteration loops.&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;strong>Streaming-First DataOps&lt;/strong>&lt;/td>
 &lt;td>Advance real-time use cases with backpressure-safe, contract-aware streaming.&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;strong>Interoperability &amp;amp; Ecosystem&lt;/strong>&lt;/td>
 &lt;td>Play well with FDC3, CDM, OpenLineage, Kafka, Snowflake, and more.&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;hr>
&lt;h2 id="-current-focus-q2-2025">🧭 Current Focus (Q2 2025)&lt;/h2>
&lt;p>These items are in active development or early testing:&lt;/p></description></item><item><title>Runink Quickstart</title><link>https://runink.org/docs/runink_quickstart/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://runink.org/docs/runink_quickstart/</guid><description>&lt;h1 id="-runink-quickstart-cdm-trade-pipeline">🚀 Runink Quickstart: CDM Trade Pipeline&lt;/h1>
&lt;p>This example shows how to define, test, apply, and run a declarative data pipeline using Runink.&lt;/p>
&lt;hr>
&lt;h2 id="environment-scenario">Environment scenario&lt;/h2>
&lt;div class="mermaid">
%% Mermaid Diagram: Runink Architecture (Blueprint View)

flowchart TD
 subgraph Developer_Client["🌐 Developer / Client"]
 Developer["Developer"]
 end

 subgraph Global_Control_Plane["🧭 Runink Global Control Plane (HA Setup)"]
 GlobalAPI["API Server x3
- AuthN/AuthZ
- Herd Routing
- TLS gRPC"]
 HerdDirectory["Herd Directory
- Maps Herds to Raft Groups
- Metadata Routing"]
 end

 subgraph Finance_Herd["🏦 Finance Herd Partition"]
 FinanceScheduler["Finance Scheduler (Leader)
- DAG Planning
- Placement Decisions"]
 FinanceBarn["Finance Barn (KV Store)
- BadgerDB (Local)"]
 FinanceGovernance["Finance Governance Service
- Lineage
- Quality
- Contracts"]
 FinanceSecrets["Finance Secrets Manager
- Raft-backed Secret Storage"]
 FinanceRaft["Finance Raft Group (5 Nodes)
(etcd-io/raft)"]
 end

 subgraph Analytics_Herd["📊 Analytics Herd Partition"]
 AnalyticsScheduler["Analytics Scheduler (Leader)
- DAG Planning
- Placement Decisions"]
 AnalyticsBarn["Analytics Barn (KV Store)
- BadgerDB (Local)"]
 AnalyticsGovernance["Analytics Governance Service
- Lineage
- Quality
- Contracts"]
 AnalyticsSecrets["Analytics Secrets Manager
- Raft-backed Secret Storage"]
 AnalyticsRaft["Analytics Raft Group (5 Nodes)
(etcd-io/raft)"]
 end

 subgraph Worker_Cluster["🧱 Worker Nodes Cluster"]
 RuniAgent["Runi Agent x100
- Node Registration
- Slice Management
- Metrics Collection"]
 RuniSlice["Runi Slice (Ephemeral Container)
- Herd Namespaced
- Config Loaded
- Secrets Injected"]
 end

 Developer --> | CLI/API Requests | GlobalAPI 
 GlobalAPI --> | Resolve Herd Assignment | HerdDirectory 
 GlobalAPI --> | Finance Pipelines | FinanceScheduler 
 GlobalAPI --> | Analytics Pipelines | AnalyticsScheduler 

 FinanceScheduler --> | DAG and Placement Reads | FinanceBarn 
 FinanceGovernance --> | Metadata/Lineage Writes | FinanceBarn 
 FinanceSecrets --> | Secrets CRUD | FinanceBarn
 FinanceBarn --> | Log Replication | FinanceRaft

 AnalyticsScheduler --> | DAG and Placement Reads | AnalyticsBarn
 AnalyticsGovernance --> | Metadata/Lineage Writes | AnalyticsBarn
 AnalyticsSecrets --> | Secrets CRUD | AnalyticsBarn 
 AnalyticsBarn --> | Log Replication | AnalyticsRaft

 FinanceScheduler --> | Dispatch Finance Slices | RuniAgent
 AnalyticsScheduler --> | Dispatch Analytics Slices | RuniAgent

 RuniAgent --> | Launch with Herd Isolation | RuniSlice
 RuniAgent --> | Fetch Finance Secrets | FinanceSecrets
 RuniAgent --> | Fetch Analytics Secrets | AnalyticsSecrets

 RuniSlice --> | Emit Lineage Events | FinanceGovernance
 RuniSlice --> | Emit Lineage Events | AnalyticsGovernance 
 RuniSlice --> | Expose Service Port | RuniAgent 
 RuniAgent --> | Port-Forwarded Access | Developer 

&lt;/div>


&lt;script type="module">
 import mermaid from "https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.esm.min.mjs";
 document.addEventListener('DOMContentLoaded', () => {
 mermaid.initialize({
 startOnLoad: true,
 theme: 'default',
 securityLevel: 'loose',
 flowchart: { useMaxWidth: true, htmlLabels: true },
 zoom: { enabled: true, scaleFactor: 0.2 }
 });
 mermaid.run();
 });
&lt;/script>



&lt;h2 id="-prerequisites">🛠️ Prerequisites&lt;/h2>
&lt;p>Ensure you have:&lt;/p></description></item><item><title>Schema Contracts</title><link>https://runink.org/docs/schema-contracts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://runink.org/docs/schema-contracts/</guid><description>&lt;h1 id="schema--contract-management--runink">Schema &amp;amp; Contract Management – Runink&lt;/h1>
&lt;p>Runink enables &lt;strong>data contracts&lt;/strong> as native Go structs — giving you strong typing, version tracking, schema validation, and backward compatibility across pipelines.&lt;/p>
&lt;p>This guide shows how to define, version, test, and enforce schema contracts in your pipelines.&lt;/p>
&lt;hr>
&lt;h2 id="-what-is-a-contract">📦 What Is a Contract?&lt;/h2>
&lt;p>A contract in Runink is a schema definition used to:&lt;/p>
&lt;ul>
&lt;li>Validate incoming and outgoing data&lt;/li>
&lt;li>Detect schema drift&lt;/li>
&lt;li>Provide PII and RBAC tagging&lt;/li>
&lt;li>Drive pipeline generation and testing&lt;/li>
&lt;/ul>
&lt;p>Contracts are generated from Go structs annotated with tags.&lt;/p></description></item><item><title>Security &amp; RBAC</title><link>https://runink.org/docs/security/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://runink.org/docs/security/</guid><description>&lt;h2 id="supported-versions">Supported Versions&lt;/h2>
&lt;p>We currently support the latest major release of pipetool. Older versions may not receive security updates or patches.&lt;/p>
&lt;hr>
&lt;h2 id="reporting-a-vulnerability">Reporting a Vulnerability&lt;/h2>
&lt;p>If you discover a security vulnerability, please do not open a public issue.&lt;/p>
&lt;p>Instead, contact us directly:&lt;/p>
&lt;ul>
&lt;li>Email: &lt;a href="mailto:security@yourdomain.org">security@yourdomain.org&lt;/a>&lt;/li>
&lt;li>PGP Key:&lt;a href="https://yourdomain.org/pgp.key"> https://yourdomain.org/pgp.key&lt;/a> (optional)&lt;/li>
&lt;/ul>
&lt;p>We aim to respond to all security reports within 5 business days. All disclosures will be handled confidentially and professionally.&lt;/p>
&lt;hr>
&lt;h2 id="disclosure-process">Disclosure Process&lt;/h2>
&lt;ol>
&lt;li>Vulnerability reported via email&lt;/li>
&lt;li>Maintainers investigate and validate the issue&lt;/li>
&lt;li>A patch is prepared and tested privately&lt;/li>
&lt;li>Coordinated disclosure timeline is agreed upon with reporter&lt;/li>
&lt;li>Advisory + patched release are published&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2 id="hall-of-fame">Hall of Fame&lt;/h2>
&lt;p>We may credit contributors who report valid vulnerabilities in our release notes, changelogs, or SECURITY.md — with consent.&lt;/p></description></item></channel></rss>