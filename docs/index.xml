<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Runink Docs :: Runink</title><link>https://paesdan.github.io/runink-site/docs/index.html</link><description>üìå Overview Runink is a Go-native distributed pipeline orchestration and governance platform. It defines a self-sufficient, distributed environment to orchestrate and execute data pipelines ‚Äî replacing complex Kubernetes or Slurm setups with an integrated runtime built on:
Linux primitives: cgroups, namespaces, exec Go-based execution and scheduling Governance, lineage, and contract enforcement Serverless-style, per-slice isolation and resource control Runink slices run like fast, secure micro-VMs ‚Äî written in Go, isolated with Linux, coordinated by Raft.</description><generator>Hugo</generator><language>en</language><atom:link href="https://paesdan.github.io/runink-site/docs/index.xml" rel="self" type="application/rss+xml"/><item><title>Architecture</title><link>https://paesdan.github.io/runink-site/docs/architecture/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://paesdan.github.io/runink-site/docs/architecture/index.html</guid><description>Runink Architecture: Go/Linux Native Distributed Data Environment Self-sufficient, distributed environment for orchestrating and executing data pipelines using Go and Linux primitives. This system acts as the cluster resource manager and scheduler (replacing Slurm), provides Kubernetes-like logical isolation and RBAC, integrates data governance features, and ensures robust security and observability. It aims for high efficiency by avoiding traditional virtualization or container runtimes like Docker. Define a self-sufficient, distributed environment for orchestrating and executing data pipelines using Go and Linux primitives, with enhanced metadata capabilities designed to support standard data governance (lineage, catalog) AND future integration of LLM-generated annotations.</description></item><item><title>Components</title><link>https://paesdan.github.io/runink-site/docs/components/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://paesdan.github.io/runink-site/docs/components/index.html</guid><description>Runink Platform Components This page describes the core building blocks of Runink ‚Äî from the API server to slices ‚Äî that make up the distributed data environment. Each component serves a purpose in ensuring secure, auditable, and high-performance pipeline execution.
Components Table Component Role Location API Server Entry point, AuthN/Z, coordination Control Plane Identity Manager OIDC/JWT validation and RBAC enforcement Control Plane Barn Raft-backed KV store Control Plane Scheduler DAG-aware placement engine Control Plane Secrets Manager Encrypted secret storage and delivery Control Plane Governance Svc Lineage, quality, LLM annotations Control Plane Runi Agent Worker orchestrator (cgroup+namespace) Worker Node Runi Slice Executed unit of pipeline logic Worker Node Herd Tenant boundary and resource isolation System-wide Contracts Data validation and schema enforcement Contracts repo DSL Parser Converts .</description></item><item><title>Benchmark</title><link>https://paesdan.github.io/runink-site/docs/benchmark/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://paesdan.github.io/runink-site/docs/benchmark/index.html</guid><description>1. Architecture &amp; Paradigm Runink: A Go/Linux-native, vertically integrated data platform that combines execution, scheduling, governance, and observability in a single runtime. Unlike traditional stacks, Runink does not rely on Kubernetes or external orchestrators. Instead, it uses a Raft-based control plane to ensure high availability and consensus across services like scheduling, metadata, and security ‚Äî forming a distributed operating model purpose-built for data.
Competitors: Use a layered, loosely coupled stack:</description></item><item><title>CLI Reference</title><link>https://paesdan.github.io/runink-site/docs/cli/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://paesdan.github.io/runink-site/docs/cli/index.html</guid><description>üß∞ Runink CLI Reference (runi) The runi CLI is the command-line interface to everything in the Runink data platform. It‚Äôs your developer-first companion for defining, testing, running, securing, and publishing data pipelines ‚Äî all from declarative .dsl files and Go-native contracts.
This reference describes all available commands, grouped by capability.
üß± Project &amp; Pipeline Lifecycle Command Description runi herd init [project-name] Scaffold a new workspace with starter contracts, features, CI config runi compile --scenario &lt;file> Generate Go pipeline code from .</description></item><item><title>CLI Help Commands</title><link>https://paesdan.github.io/runink-site/docs/clihelp/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://paesdan.github.io/runink-site/docs/clihelp/index.html</guid><description>üÜò Runink CLI: Help Template This is a developer-friendly help template for implementing consistent runi &lt;command> --help outputs.
üß± Format: Basic Help Command runi &lt;command> [subcommand] [flags] Usage: runi &lt;command> [options] Options: -h, --help Show this help message and exit -v, --verbose Show detailed logs and diagnostics Example: runi init --help Initialize a new Runink project. Usage: runi init [project-name] Flags: -h, --help Show help for init üîÑ Example: runi compile --help runi compile --scenario &lt;file.</description></item><item><title>Contributing</title><link>https://paesdan.github.io/runink-site/docs/contributing/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://paesdan.github.io/runink-site/docs/contributing/index.html</guid><description>ü§ù Contributing to Runink Welcome! First off, thank you for considering contributing to Runink. We deeply appreciate your support and effort to improve our project.
This document will guide you through the process of contributing code, filing issues, suggesting features, and participating in the Runink community.
üìú Code of Conduct We expect everyone participating to adhere to our Code of Conduct (to be created). Respect and kindness are the foundation.</description></item><item><title>Data Lineage</title><link>https://paesdan.github.io/runink-site/docs/data-lineage/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://paesdan.github.io/runink-site/docs/data-lineage/index.html</guid><description>Data Lineage &amp; Metadata Tracking ‚Äì Runink Runink pipelines are designed to be fully traceable, auditable, and schema-aware. With built-in lineage support, every pipeline can generate:
Visual DAGs of data flow and dependencies Metadata snapshots with schema versions and field hashes Run-level logs for audit, debugging, and compliance This guide walks through how Runink enables robust data observability and governance by default.
üîç What Is Data Lineage? Lineage describes where your data came from, what happened to it, and where it went.</description></item><item><title>Feature DSL</title><link>https://paesdan.github.io/runink-site/docs/feature-dsl/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://paesdan.github.io/runink-site/docs/feature-dsl/index.html</guid><description>üìò Feature DSL ‚Äî Authoring Pipelines in Natural Language Runink‚Äôs .dsl files allow data, governance, and domain teams to write declarative pipeline logic in plain English ‚Äî no YAML, no code, just structured steps tied to contracts.
Inspired by Gherkin and feature-driven development, the DSL is intentionally designed to:
Align with real-world data contracts Support lineage, compliance, and multi-tenant governance Be editable by non-engineers ‚Äî analysts, stewards, and reviewers ‚ú® Full Example Feature: Trade Events ‚Äì Validation &amp; Compliance Scenario: Validate and Tag Incoming Financial Trade Events Metadata: purpose: "Check and tag incoming trade events for compliance and data quality" module_layer: "Silver" herd: "Finance" slo: "99.</description></item><item><title>Getting Started</title><link>https://paesdan.github.io/runink-site/docs/getting_started/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://paesdan.github.io/runink-site/docs/getting_started/index.html</guid><description>Getting Started with Runink Welcome to Runink! This quick-start guide will help you get up and running with Runink to effortlessly build, test, and run data pipelines.
üöÄ 1. Installation Make sure you have Go installed (v1.20 or later). Then install Runink:
go install github.com/runink/runink@latest Ensure $GOPATH/bin is in your $PATH.
üõ† 2. Initialize Your Project Create a new Runink project in seconds:
runi init myproject cd myproject This command generates:</description></item><item><title>Glossary</title><link>https://paesdan.github.io/runink-site/docs/glossary/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://paesdan.github.io/runink-site/docs/glossary/index.html</guid><description>Runink Glossary This glossary defines key terms, acronyms, and concepts used throughout the Runink documentation and codebase.
.dsl File A human-readable file written in Gherkin syntax used to describe a data pipeline scenario using Given/When/Then structure and tags like @source, @step, and @sink.
BDD (Behavior-Driven Development) A software development approach that describes application behavior in plain language, often used with .dsl files.
Golden File A snapshot of the expected output from a pipeline or transformation, used to assert correctness in automated tests.</description></item><item><title>Roadmap</title><link>https://paesdan.github.io/runink-site/docs/roadmap/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://paesdan.github.io/runink-site/docs/roadmap/index.html</guid><description>üó∫Ô∏è Runink Roadmap Welcome to the official Runink Roadmap ‚Äî our evolving guide to what we‚Äôre building, where we‚Äôre headed, and how you can get involved.
Runink is built on the belief that modern data platforms should be safe by default, composable by design, and collaborative at scale. This roadmap reflects our commitment to transparency, community-driven development, and rapid iteration.
üß© Roadmap Themes Theme Description Composable Pipelines Make it easy to build, reuse, and test pipeline steps across teams and domains.</description></item><item><title>Runink Quickstart</title><link>https://paesdan.github.io/runink-site/docs/runink_quickstart/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://paesdan.github.io/runink-site/docs/runink_quickstart/index.html</guid><description>üöÄ Runink Quickstart: CDM Trade Pipeline This example shows how to define, test, apply, and run a declarative data pipeline using Runink.
Environment scenario %% Mermaid Diagram: Runink Architecture (Blueprint View) flowchart TD subgraph Developer_Client["üåê Developer / Client"] Developer["Developer"] end subgraph Global_Control_Plane["üß≠ Runink Global Control Plane (HA Setup)"] GlobalAPI["API Server x3 - AuthN/AuthZ - Herd Routing - TLS gRPC"] HerdDirectory["Herd Directory - Maps Herds to Raft Groups - Metadata Routing"] end subgraph Finance_Herd["üè¶ Finance Herd Partition"] FinanceScheduler["Finance Scheduler (Leader) - DAG Planning - Placement Decisions"] FinanceBarn["Finance Barn (KV Store) - BadgerDB (Local)"] FinanceGovernance["Finance Governance Service - Lineage - Quality - Contracts"] FinanceSecrets["Finance Secrets Manager - Raft-backed Secret Storage"] FinanceRaft["Finance Raft Group (5 Nodes) (etcd-io/raft)"] end subgraph Analytics_Herd["üìä Analytics Herd Partition"] AnalyticsScheduler["Analytics Scheduler (Leader) - DAG Planning - Placement Decisions"] AnalyticsBarn["Analytics Barn (KV Store) - BadgerDB (Local)"] AnalyticsGovernance["Analytics Governance Service - Lineage - Quality - Contracts"] AnalyticsSecrets["Analytics Secrets Manager - Raft-backed Secret Storage"] AnalyticsRaft["Analytics Raft Group (5 Nodes) (etcd-io/raft)"] end subgraph Worker_Cluster["üß± Worker Nodes Cluster"] RuniAgent["Runi Agent x100 - Node Registration - Slice Management - Metrics Collection"] RuniSlice["Runi Slice (Ephemeral Container) - Herd Namespaced - Config Loaded - Secrets Injected"] end Developer --> | CLI/API Requests | GlobalAPI GlobalAPI --> | Resolve Herd Assignment | HerdDirectory GlobalAPI --> | Finance Pipelines | FinanceScheduler GlobalAPI --> | Analytics Pipelines | AnalyticsScheduler FinanceScheduler --> | DAG and Placement Reads | FinanceBarn FinanceGovernance --> | Metadata/Lineage Writes | FinanceBarn FinanceSecrets --> | Secrets CRUD | FinanceBarn FinanceBarn --> | Log Replication | FinanceRaft AnalyticsScheduler --> | DAG and Placement Reads | AnalyticsBarn AnalyticsGovernance --> | Metadata/Lineage Writes | AnalyticsBarn AnalyticsSecrets --> | Secrets CRUD | AnalyticsBarn AnalyticsBarn --> | Log Replication | AnalyticsRaft FinanceScheduler --> | Dispatch Finance Slices | RuniAgent AnalyticsScheduler --> | Dispatch Analytics Slices | RuniAgent RuniAgent --> | Launch with Herd Isolation | RuniSlice RuniAgent --> | Fetch Finance Secrets | FinanceSecrets RuniAgent --> | Fetch Analytics Secrets | AnalyticsSecrets RuniSlice --> | Emit Lineage Events | FinanceGovernance RuniSlice --> | Emit Lineage Events | AnalyticsGovernance RuniSlice --> | Expose Service Port | RuniAgent RuniAgent --> | Port-Forwarded Access | Developer üõ†Ô∏è Prerequisites Ensure you have:</description></item><item><title>Schema Contracts</title><link>https://paesdan.github.io/runink-site/docs/schema-contracts/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://paesdan.github.io/runink-site/docs/schema-contracts/index.html</guid><description>Schema &amp; Contract Management ‚Äì Runink Runink enables data contracts as native Go structs ‚Äî giving you strong typing, version tracking, schema validation, and backward compatibility across pipelines.
This guide shows how to define, version, test, and enforce schema contracts in your pipelines.
üì¶ What Is a Contract? A contract in Runink is a schema definition used to:
Validate incoming and outgoing data Detect schema drift Provide PII and RBAC tagging Drive pipeline generation and testing Contracts are generated from Go structs annotated with tags.</description></item><item><title>Security &amp; RBAC</title><link>https://paesdan.github.io/runink-site/docs/security/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://paesdan.github.io/runink-site/docs/security/index.html</guid><description>Supported Versions We currently support the latest major release of pipetool. Older versions may not receive security updates or patches.
Reporting a Vulnerability If you discover a security vulnerability, please do not open a public issue.
Instead, contact us directly:
Email: security@yourdomain.org PGP Key: https://yourdomain.org/pgp.key (optional) We aim to respond to all security reports within 5 business days. All disclosures will be handled confidentially and professionally.
Disclosure Process Vulnerability reported via email Maintainers investigate and validate the issue A patch is prepared and tested privately Coordinated disclosure timeline is agreed upon with reporter Advisory + patched release are published Hall of Fame We may credit contributors who report valid vulnerabilities in our release notes, changelogs, or SECURITY.</description></item></channel></rss>